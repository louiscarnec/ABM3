!@encoding CP1252
model "VRP"
	uses "mmxprs"
	
	declarations
		citiesNum: integer
		VNUM: integer
		VFIXEDCOST: integer
	end-declarations 	
	
	initializations from "disttry.txt"
		citiesNum
		VNUM
		VFIXEDCOST
	end-initializations	

	declarations
		cities = 1..citiesNum
		citiestovisit = 2..citiesNum
		cityNames : array(cities) of string
		DIST : array(cities, cities) of real
		POP: array(cities) of real
		demand: array(cities) of real
		vehicles = 1..VNUM
		VCAPACITY: integer
		move : array(cities, cities) of mpvar
		totalq : array(citiestovisit) of mpvar
		totaldemand:real
	end-declarations

	initializations from "disttry.txt"
		POP
		cityNames
		DIST
		VCAPACITY
	end-initializations
	
	!Print Total Demand
	totaldemand := sum(i in cities) demand(i)
	writeln(totaldemand)
	
	!create demand based on population of city + random
	forall(i in citiestovisit)demand(i) := round((POP(i)/1000)+random*((POP(i)/100)))
	
	!Objective Function: Distance Covered
	dist := sum(i,j in cities | i<>j) DIST(i,j)*move(i,j)
	
	!Visit every city once
	forall(j in citiestovisit) sum(i in cities | i<>j) move(i,j)=1
	forall(i in citiestovisit) sum(j in cities | i<>j) move(i,j)=1
	
	!if i first city i tour: total quantity delivered = demand from city
	forall(i in citiestovisit) totalq(i) <= VCAPACITY + (demand(i) - VCAPACITY)*move(1,i)
	
	!
	forall(i,j in citiestovisit | i<>j) totalq(j) >= totalq(i) + demand(j) - VCAPACITY + VCAPACITY*move(i,j) + (VCAPACITY - demand(j) - demand(i))*move(j,i)
	
	forall(i in citiestovisit) do
		totalq(i) <= VCAPACITY
		totalq(i) >= demand(i)
	end-do
	
	forall(i,j in cities | i<>j) move(i,j) is_binary
	
	 declarations
           modcut: array(citiestovisit) of linctr
          end-declarations
          forall(i in citiestovisit) do
           modcut(i):= totalq(i) >= demand(i) + sum(j in cities| i<>j) demand(j)*move(j,i)
           setmodcut(modcut(i))
			end-do
	
	minimise(dist)
	
	 writeln("Total distance: ", getobjval)
 forall(i in citiestovisit)
  if(getsol(move(1,i))>0) then
   ct:=demand(i)
   writeln(cityNames(1), " -> ", cityNames(i))
   p:=i
   while(p<>1) do
    n:= integer(round(sum(j in cities) j*getsol(move(p,j))))
    writeln(cityNames(p), " -> ", cityNames(n))
    ct+=demand(n)
    p:=n
   end-do
   writeln("Quantity delivered: ", ct)
  end-if

		
end-model
