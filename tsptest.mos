{\rtf1\ansi\ansicpg1252\cocoartf1504
{\fonttbl\f0\froman\fcharset0 Times-Roman;\f1\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red0\green0\blue0;\red11\green84\blue1;
\red0\green0\blue208;}
{\*\expandedcolortbl;\csgray\c100000;\cssrgb\c0\c0\c0;\cssrgb\c0\c0\c0;\cssrgb\c0\c39216\c0;
\cssrgb\c0\c0\c85098;}
\paperw11900\paperh16840\margl1440\margr1440\vieww16860\viewh11700\viewkind0
\deftab720
\pard\pardeftab720\sl300\sa240\partightenfactor0

\f0\fs24 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\pard\pardeftab720\partightenfactor0

\f1\fs26\fsmilli13333 \cf0 \outl0\strokewidth0 model Transport\
 uses "mmxprs"\
\
 declarations\
  REGION: set of string                 ! Set of customer regions\
  PLANT: set of string                  ! Set of plants\
\
  DEMAND: array(REGION) of real         ! Demand at regions\
  PLANTCAP: array(PLANT) of real        ! Production capacity at plants\
  PLANTCOST: array(PLANT) of real       ! Unit production cost at plants\
  TRANSCAP: dynamic array(PLANT,REGION) of real\
                                        ! Capacity on each route plant->region\
  DISTANCE: dynamic array(PLANT,REGION) of real\
                                        ! Distance of each route plant->region\
  FUELCOST: real                        ! Fuel cost per unit distance\
\
  flow: dynamic array(PLANT,REGION) of mpvar    ! Flow on each route\
 end-declarations\
 \
 initializations from 'transprt.dat'\
  DEMAND\
  [PLANTCAP,PLANTCOST] as 'PLANTDATA'\
  [DISTANCE,TRANSCAP] as 'ROUTES'\
  FUELCOST\
 end-initializations\
 \
! Create the flow variables that exist\
 forall(p in PLANT, r in REGION | exists(TRANSCAP(p,r)) ) create(flow(p,r))\
 \
! Objective: minimize total cost\
 MinCost:= sum(p in PLANT, r in REGION | exists(flow(p,r))) \
            (FUELCOST * DISTANCE(p,r) + PLANTCOST(p)) * flow(p,r)\
 \
! Limits on plant capacity\
 forall(p in PLANT) sum(r in REGION) flow(p,r) <= PLANTCAP(p)</p>\
\
! Satisfy all demands\
 forall(r in REGION) sum(p in PLANT) flow(p,r) = DEMAND(r)\
 \
! Bounds on flows\
 forall(p in PLANT, r in REGION | exists(flow(p,r))) \
  flow(p,r) <= TRANSCAP(p,r)\
 \
 minimize(MinCost)                       ! Solve the problem\
 \
end-model
\f0\fs24 \cf2 \outl0\strokewidth0 \strokec2 \
\pard\pardeftab720\sl300\sa240\partightenfactor0
\cf2 (!\
\pard\pardeftab720\sl200\partightenfactor0

\f1\fs18\fsmilli9333 \cf4 \strokec4 !************ Formulate and solve a TSP (sub)problem ************\
\pard\pardeftab720\sl200\partightenfactor0
\cf5 \strokec5  declarations\
\pard\pardeftab720\sl200\partightenfactor0
\cf2 \strokec2    DIST: \cf5 \strokec5 array\cf2 \strokec2 (NodeSet,NodeSet) \cf5 \strokec5 of real\
\cf2 \strokec2    NEXTC: \cf5 \strokec5 array\cf2 \strokec2 (NodeSet) \cf5 \strokec5 of integer\
\cf2 \strokec2    fly: \cf5 \strokec5 array\cf2 \strokec2 (NodeSet,NodeSet) \cf5 \strokec5 of mpvar\
 end-declarations\
\pard\pardeftab720\sl200\partightenfactor0
\cf4 \strokec4 ! Visit every city once\
! Distance between cities\
! Next city after i in solution\
! 1 if flight from i to j\
\pard\pardeftab720\sl200\partightenfactor0
\cf5 \strokec5  forall\cf2 \strokec2 (i \cf5 \strokec5 in \cf2 \strokec2 NodeSet) \cf5 \strokec5 sum\cf2 \strokec2 (j \cf5 \strokec5 in \cf2 \strokec2 NodeSet | i<>j) fly(i,j) = 1\
\cf5 \strokec5  forall\cf2 \strokec2 (j \cf5 \strokec5 in \cf2 \strokec2 NodeSet) \cf5 \strokec5 sum\cf2 \strokec2 (i \cf5 \strokec5 in \cf2 \strokec2 NodeSet | i<>j) fly(i,j) = 1\
\cf5 \strokec5  forall\cf2 \strokec2 (i,j \cf5 \strokec5 in \cf2 \strokec2 NodeSet | i<>j) fly(i,j) \cf5 \strokec5 is_binary\
\pard\pardeftab720\sl200\partightenfactor0
\cf4 \strokec4 ! Fix part of the variables\
\pard\pardeftab720\sl200\partightenfactor0
\cf5 \strokec5  forall\cf2 \strokec2 (i \cf5 \strokec5 in \cf2 \strokec2 FixedSet | SOL(i) \cf5 \strokec5 not in \cf2 \strokec2 UnfixedSet) fly(i,SOL(i)) = 1\
\pard\pardeftab720\sl200\partightenfactor0
\cf4 \strokec4 ! Objective: total distance\
\pard\pardeftab720\sl200\partightenfactor0
\cf2 \strokec2  TotalDist:= \cf5 \strokec5 sum\cf2 \strokec2 (i,j \cf5 \strokec5 in \cf2 \strokec2 NodeSet | i<>j) DIST(i,j)*fly(i,j)\
 minimize(TotalDist) \cf4 \strokec4              ! Solve the initial problem\
\cf2 \strokec2  break_subtour \cf4 \strokec4                    ! Eliminate subtours\
\pard\pardeftab720\sl200\partightenfactor0
\cf5 \strokec5  if \cf2 \strokec2 LEVEL>1 \cf5 \strokec5 then \cf2 \strokec2 two_opt; \cf5 \strokec5 end-if \cf4 \strokec4  ! 2-opt for partially fixed prob.s\
!)}