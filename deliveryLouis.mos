!@encoding CP1252
(! This problem is a mix of vehicle routing problem and a optimal mix problem. 
We are interestred in finding the optimal location for one or two warehouses (decision),
given that the warehouses can be located in any of the cities they supply (see cities). 
We are also interested in finding the optimal mix of vehicles to be used from each location,
not all vehicles have to be purchased (they have fixed and variable costs associated to them).
Given the fact that the vehicles have different costs and capacities, each may better serve
a particular route on which the distances and demands of the cities along the route differ.

I understand there are a lot of permutations here; so if this is not possible we could simplify:
one warehouse only, pick best location given mix of vehicles and what number of vehicles for which route!)
model "Delivery"
	uses "mmxprs"; !gain access to the Xpress-Optimizer solver
	
	declarations
		citiesNum: integer
		VNUM: integer
		WAREHOUSENUM: integer
		VFIXEDCOST: integer
	end-declarations 	
	
	initializations from "disttry.txt"
		citiesNum
		VNUM
		VFIXEDCOST
	end-initializations	

	declarations
		TRIPS = 4
		trips = 1..TRIPS
		
		
		cities = 1..citiesNum
		cityNames : array(cities) of string
		
		DIST : array(cities, cities) of real
		POP: array(cities) of real
		
		demand: array(cities) of real
		
		vehicles = 1..VNUM
		VCAPACITY: array(vehicles) of real
		
	
		WAREHOUSECOST: integer
		
		(!decision variables: given the shortest route from each city,
		where should the warehouse(s) be located (one or two warehouses
		taking into account cost of warehouse), which vehicle(s) should be 
		purchased to be used for serving the shortest route taking into account
		fixed costs of purchasing the vehicles and variables cost per km of driving?
		Demand at location should be met!)
		
		move : array(cities, cities) of mpvar !which route to take
		m : array(vehicles) of mpvar
	end-declarations

	initializations from "disttry.txt"
		POP
		cityNames
		DIST
		VFIXEDCOST
		VCAPACITY
	end-initializations
	
		! Procdeure to check problem status was written by P. Carroll, copied from potter_goal_preempt.mos
	procedure printSta
		declarations
			status : string
		end-declarations

		case getprobstat of
			XPRS_OPT : status := "LP Optimum found"
    		XPRS_UNF : status := "Unfinished"
    		XPRS_INF : status := "Infeasible"
    		XPRS_UNB : status := "Unbounded"
    		XPRS_OTH : status := "Failed"
    		else status := "???"
    	end-case

    	writeln("Problem status: ", status)
end-procedure

procedure printSol
	writeln("Edges Used:")
		forall(i,j in cities)
			if getsol(move(i,j)) > 0 then
				writeln(cityNames(i)," to ",cityNames(j),". Solution: ",getsol(move(i,j)), ". Cost: ", DIST(i,j))
			end-if	
end-procedure
	
	forall(i,j in cities)
		if getsol(move(1,j))>0 then 
		writeln("j",j)
		end-if
	! Calculate demand per city as pop/1000 plus random 
	forall(i in cities) demand(i):=round((POP(i)/1000)+random*((POP(i)/100)))
	
	forall(i,j in cities | i<j) DIST(j,i):=DIST(i,j)
	
	!TSP
	dist := sum(i, j in cities | i <> j) DIST(i,j)*move(i,j) + VNUM*VFIXEDCOST
    forall(i, j in cities | i <> j) move(i, j) is_binary
    
    !All Outgoing nodes at most number of vehicles/trips
    sum(j in cities | j>1) move(1,j) = VNUM
    ! All Incoming nodes at most number of vehicles/trips
    sum(j in cities | j>1) move(j,1) = VNUM
    
    !Visit every city once
    forall(j in cities | j>1) sum(i in cities | i<>j) move(i, j) = 1
    forall(i in cities | i>1) sum(j in cities | i<>j) move(i, j) = 1
    
    
    !Solve TSP
    minimise(dist)
    printSta
    printSol
	
	
	!Objective Function: Minimise Cost of Delivery
	
	procedure break_subtour
		declarations 
			TOUR, SMALLEST, ALLCITIES: set of integer
			x: array(trips) of integer
		end-declarations	
				
				
		forall(i in cities)NEXTC(i):= integer(round(getsol(sum(j in cities) j*move(i,j) )))
		writeln(NEXTC)
		
		
		!Get subtour that contains city 1
		TOUR:={}
		
		forall(i in trips)
			if move(1,i)>=1 then
				TOUR+=1
			end-if	
		
		first:=1
		repeat
			TOUR+={first}
			first:=NEXTC(first)
		until first=1
		size:=getsize(TOUR)
		
		!Find smallest Subtour
		if size < citiesNum then
			SMALLEST := TOUR
			if size>2 then
				ALLCITIES:=TOUR
				forall (i in cities) do
					if(i not in ALLCITIES) then 
						TOUR := {}
						first := i
						repeat
							TOUR +={first}
							first:=NEXTC(first)
						until first=i
						ALLCITIES += TOUR
						if getsize(TOUR) < size then
							SMALLEST := TOUR
							size := getsize(SMALLEST)
						end-if
						if size=2 then
							break
						end-if
					end-if
				end-do
			end-if
			
		!Add a subtour breaking constraint
		sum(i in SMALLEST) move(i,NEXTC(i)) <= getsize(SMALLEST) - 1
			
		minimise(dist)
		
		break_subtour
		
		end-if
	end-procedure	
	
	break_subtour
	writeln("Total Cost: ", getobjval)
	printSta
	printSol
	
	
end-model
