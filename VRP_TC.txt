!@encoding CP1252
model "VRP"
	uses "mmxprs"
	
	declarations
		citiesNum: integer
		VNUM: integer
		VFIXEDCOST: integer
	end-declarations 	
	
	initializations from "distsmall.txt"
		citiesNum
		VNUM
		VFIXEDCOST
	end-initializations	

	declarations
		cities = 1..citiesNum
		citiestovisit = 2..citiesNum
		cityNames : array(cities) of string
		DIST : array(cities, cities) of real
		POP: array(cities) of real
		demand: array(cities) of real
		vehicles = 1..VNUM
		VCAPACITY: integer
		MAXHOURS : integer
		move : array(cities, cities) of mpvar
		totalq : array(citiestovisit) of mpvar
		total_journey_hours : array(citiestovisit) of mpvar
		totaltime:array(citiestovisit) of mpvar
		totaldist: array(citiestovisit) of mpvar
		totaldemand:real
		trips: integer
		quantitydelivered: array(1..10) of real
		distancecovered_c: array(1..10) of real
		numberofstops: array(1..10) of integer
		timebefore = array(citiestovisit)of real
		diatomite: array(cities,cities) of real
		TIMECAPACITY = 100
		KMH=80
		MAXHOURS_PERDAY = 8
		DELIVERY_VAN_OVERNIGHT_CHARGES = 200 !Vehicle overnight stand-by charges
	end-declarations

	initializations from "distsmall.txt"
		POP
		cityNames
		DIST
		VCAPACITY	
	end-initializations
	
	!Print Total Demand
	totaldemand := sum(i in cities) demand(i)
	writeln(totaldemand)
	
	!cost of transportation - 
	!!!!This needs to be changed to be more realistic, it currently the distance
	TRANSPORTATION_COST = DIST

	!create demand based on population of city + random
	forall(i in citiestovisit)demand(i) := round((POP(i)/1000)+random*((POP(i)/100)))
	
	!Objective Function: Cost of Distance Covered
	dist_c := sum(i,j in cities | i<>j) TRANSPORTATION_COST(i,j)*move(i,j) 
	
	!Visit every city once
	forall(j in citiestovisit) sum(i in cities | i<>j) move(i,j)=1
	forall(i in citiestovisit) sum(j in cities | i<>j) move(i,j)=1
	
	

	!if i first city i tour: total quantity delivered = demand from city
	forall(i in citiestovisit) totalq(i) <= VCAPACITY + (demand(i) - VCAPACITY)*move(1,i)

	!if i first city i tour: total journey time is less than max_hours_perday 
	forall(i in citiestovisit) total_journey_hours(i) <= MAXHOURS_PERDAY + (demand(i) - MAXHOURS_PERDAY)*move(1,i)
	
	!strictly increasing quant
	forall(i,j in citiestovisit | i<>j) totalq(j) >= totalq(i) + demand(j) - VCAPACITY + VCAPACITY*move(i,j) + (VCAPACITY - demand(j) - demand(i))*move(j,i)
	
	!Number of times pass through the depot / NUMBER OF TRIPS = 4
	!sum(i in citiestovisit) move(i,1)=2
	
	!upper and lower bound on quantity
	forall(i in citiestovisit) do
		totalq(i) <= VCAPACITY
		totalq(i) >= demand(i)
	end-do
	

	
	!decision variable is binary
	forall(i,j in cities | i<>j) move(i,j) is_binary
	
	
	procedure printTrips
	writeln("---")
	 writeln("Total cost distance : ", getobjval)
	 forall(i in citiestovisit)
	  if(getsol(move(1,i))>0) then
	   ct:=demand(i)
	   distancesub_c:= TRANSPORTATION_COST(1,i)
	   stops:=1
	   writeln(cityNames(1), " -> ", cityNames(i), " Cost of Distance: ", TRANSPORTATION_COST(1,i))
	   p:=i
	   while(p<>1) do
	    n:= integer(round(sum(j in cities) j*getsol(move(p,j))))
	    distpn_c:= TRANSPORTATION_COST(p,n)
	    if (distpn_c=0)then
	    	distpn_c:= TRANSPORTATION_COST(n,p)
	    end-if	
	    writeln(cityNames(p), " -> ", cityNames(n), " Cost of Distance:" , distpn_c)
	    ct+=demand(n)
	    distancesub_c+=distpn_c
	    p:=n
	    stops+=1
	   end-do
	   writeln("Quantity delivered: ", ct)
	   writeln(â€œCost of Distance Covered: ", distancesub_c)
	   writeln("Number of Stops in trip: ", stops)
	   writeln("---TRIP---")
	   trips+=1
	   quantitydelivered(trips):= ct
	   distancecovered_c(trips) := distancesub_c
	   numberstops(trips) := stops
	  end-if
	end-procedure
	
	
	!minimise(dist_c)
	while(getobjval = 0) do
		minimise(dist_c)
	end-do	
	printTrips
	
	
		
end-model
