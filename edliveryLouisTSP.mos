!@encoding CP1252
(! This problem is a mix of vehicule routing problem and a optimal mix problem. 
We are interestred in finding the optimal location for one or two warehouses (decision),
given that the warehouses can be located in any of the cities they supply (see cities). 
We are also interested in finding the optimal mix of vehicules to be used from each location,
not all vehicules have to be purchased (they have fixed and variable costs associated to them).
Given the fact that the vehicules have different costs and capacities, each may better serve
a particular route on which the distances and demands of the cities along the route differ.

I understand there are a lot of permutations here; so if this is not possible we could simplify:
one warehouse only, pick best location given mix of vehicules and what number of vehicules for which route!)
model "Delivery"
	uses "mmxprs"; !gain access to the Xpress-Optimizer solver
	
	declarations
	NODES: set of string ! Set of nodes
	EDGE: array(ARCSET:range) of record ! Arcs:
		Source,Sink: string ! Source and sink of arc
		Cost: real ! Cost coefficient
		x: mpvar
	end-record		!Suggestion; Add an edge name record
end-declarations

initializations from "distbis.txt"
!initializations from "tsp_edge_case.txt"
	EDGE(Source, Sink, Cost)
end-initializations
	
	declarations
		citiesNum: integer
		VNUM: integer
		WAREHOUSENUM: integer
	end-declarations 	
	
	initializations from "distlatest.txt"
		citiesNum
		VNUM
		WAREHOUSENUM
	end-initializations	

	declarations
		cities = 1..citiesNum
		cityNames : array(cities) of string
		
		POP: array(cities) of real
		
		demand: array(cities) of real
		
		vehicules = 1..VNUM
		VFIXEDCOST: array(vehicules) of real
		VVARIABLECOST: array(vehicules) of real
		
		warehouses = 1..WAREHOUSENUM
		WAREHOUSECOST: integer
		
		(!decision variables: given the shortest route from each city,
		where should the warehouse(s) be located (one or two warehouses
		taking into account cost of warehouse), which vehicule(s) should be 
		purchased to be used for serving the shortest route taking into account
		fixed costs of purchasing the vehicules and variables cost per km of driving?
		Demand at location should be met!)
		warehouseloc : array(warehouses) of mpvar
		move : array(cities, cities) of mpvar !which route to take
		vehicule: array(vehicules) of mpvar
	end-declarations

	initializations from "distlatest.txt"
		POP
		cityNames
		VFIXEDCOST
		VVARIABLECOST
		WAREHOUSECOST
		WAREHOUSENUM
	end-initializations
	
		! Procdeure to check problem status was written by P. Carroll, copied from potter_goal_preempt.mos
	procedure printSta
		declarations
			status : string
		end-declarations

		case getprobstat of
			XPRS_OPT : status := "LP Optimum found"
    		XPRS_UNF : status := "Unfinished"
    		XPRS_INF : status := "Infeasible"
    		XPRS_UNB : status := "Unbounded"
    		XPRS_OTH : status := "Failed"
    		else status := "???"
    	end-case

    	writeln("Problem status: ", status)
end-procedure

	procedure display_results
	! Solution printing
	 writeln("Tour length: ", getobjval)
	
	 writeln("Edges used:")
	 forall(a in ARCSET)
	  if getsol(EDGE(a).x) > 0 then
	  	writeln("Connect ", EDGE(a).Source," to ",EDGE(a).Sink, " Cost: ",EDGE(a).Cost, " x is : ", getsol(EDGE(a).x)  ) 
	  end-if
	 writeln
	end-procedure
	
	! Objective: sum of costs of edges
	TSP:= sum(a in ARCSET ) EDGE(a).Cost*EDGE(a).x
	
		
	! Calculate demand per city as pop/1000 plus random 
	forall(i in cities) demand(i):=round((POP(i)/1000)+random*((POP(i)/100)))
	
	!TSP
	!dist := sum(i, j in cities | i <> j) DIST(i, j) * move(i, j)
    !forall(i, j in cities | i <> j) move(i, j) is_binary
    
    !Solve TSP
    minimise(TSP)
	printSta
	writeln(getobjval)
	!Objective Function: Minimise Cost of Delivery
	
		

end-model
